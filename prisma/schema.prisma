// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = "env("DATABASE_URL")"
}

model Dept {
  id           String   @id @default(uuid())
  name         String
  abbreviation String   @unique
  courses      Course[]
}

model Course {
  id     String @id @default(uuid())
  name   String?
  code   String
  term   String
  dept   Dept   @relation(fields: [deptId], references: [id])
  deptId String
  books  Book[]

  @@unique([code, deptId], name: "courseIdentifier")
}

model Book {
  id                String   @id @default(uuid())
  isbn              String   @unique
  name              String
  imageUrl          String?
  googleBooksId     String?
  isCampusStoreBook Boolean
  campusStorePrice  Int?
  courses           Course[]
  posts             Post[]
}

model Post {
  id          String     @id @default(uuid())
  price       Int
  description String
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      PostStatus @default(ACTIVE)
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  book        Book       @relation(fields: [bookId], references: [id])
  bookId      String
}

enum PostStatus {
  ACTIVE
  SOLD
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  name      String?
  imageUrl  String?
  posts     Post[]
  sessions  Session[]
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  hashedToken    String   @unique
  expirationDate DateTime
}

model VerificationEmail {
  id             String   @id @default(uuid())
  email          String
  hashedToken    String   @unique
  expirationDate DateTime
}
